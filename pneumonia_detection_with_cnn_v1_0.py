# -*- coding: utf-8 -*-
"""Pneumonia Detection with CNN v1.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BMtngZfMpubp4dxM5r6iwJp4dNYnNlVU
"""

TRAIN_PATH = "/content/drive/MyDrive/dataset/training"
VAL_PATH = "/content/drive/MyDrive/dataset/validation"
#1.0 includes re-evaluating steps_per_epoch parameter

import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.layers import *
from keras.preprocessing import image
from keras.models import Sequential

model = Sequential()
model.add(Conv2D(64, kernel_size= (3,3), activation='relu', input_shape=(256, 256, 3))) #32
model.add(Conv2D(128, (3,3), activation='relu')) #64
model.add(MaxPooling2D(pool_size= (2,2)))
#model.add(Dropout(0.25))


model.add(Conv2D(128, (3,3), activation='relu')) #64
model.add(MaxPooling2D(pool_size= (2,2)))
#model.add(Dropout(0.25))


model.add(Conv2D(256, (3,3), activation='relu')) #128
model.add(MaxPooling2D(pool_size= (2,2)))
#model.add(Dropout(0.25))


model.add(Flatten())
model.add(Dense(128, activation='relu')) #64
#model.add(Dropout(0.25))
model.add(Dense(3, activation='softmax'))

model.compile(loss= 'categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])

model.summary()

train_datagen = image.ImageDataGenerator(
      rescale=1./255,
      shear_range=0.1, #0.2
      zoom_range=0.1, #0.2
      horizontal_flip=True,
      )
test_dataset = image.ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/dataset/training/',
    target_size = (256,256),
    color_mode = 'rgb',
    batch_size = 32, 
    class_mode= 'categorical'
)

train_generator.class_indices

validation_generator = test_dataset.flow_from_directory(
    '/content/drive/MyDrive/dataset/validation/',
    target_size = (256,256),
    batch_size = 32, 
    class_mode = 'categorical'
)

hist = model.fit(
    train_generator,
    steps_per_epoch = 70,  
    epochs = 30, #10 
    validation_data = validation_generator,
    validation_steps =2
)

acc = hist.history['accuracy']
val_acc = hist.history['val_accuracy']
loss = hist.history['loss']
val_loss = hist.history['val_loss']
epochs = range(1, len(acc) + 1)

plt.plot(epochs, acc, 'bo', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and Validation Accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and Validation loss')
plt.legend()